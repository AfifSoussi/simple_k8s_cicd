name: Build and Push Docker Image

on:
  push:
    branches: [main, pipeline]

  pull_request:
    branches: [main, pipeline]

jobs:
  build:
    runs-on: ubuntu-latest
    #important to read and write packages on ghcr
    permissions:
        contents: read
        packages: write
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          #replace harcoding username as i'm using same account
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        id: build
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web:pipeline -f ./app/dockerfile ./app
        continue-on-error: false

      # Step 5: Push the Docker image if build was successful
      - name: Push Docker Image
        if: success()
        run: |
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web:pipeline
        continue-on-error: false

      # Step 6: Tag the image with 'latest' after successful push
      - name: Tag Docker Image
        if: success()
        run: |
          docker tag ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web:pipeline ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web:latest
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web:latest

      # Step 7: fallback control if the build or push fails
      - name: Send Notification on Failure
        if: failure()
        run: |
          echo "Build failed. Please check the logs."




  deploy:
    needs: build  # Deploy stage depends on build job success
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up Kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'  # You can change the version as per your cluster

      # Step 2: Install Helm
      - name: Install Helm
        uses: azure/setup-helm@v3

      # Step 3: Configure Kubeconfig (to connect to your local Kubernetes cluster)
      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config  # Add your kubeconfig as a GitHub secret
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      # Step 4: Install or Upgrade the Helm chart
      - name: Helm Install or Upgrade
        run: |
          helm upgrade --install hello-world-CD ./helm-chart -f ./helm-chart/values.yaml --set image.repository=ghcr.io/${{ secrets.GHCR_USERNAME }}/simple-web --set image.tag=latest

      # Step 5: Port-forward to access the application locally (Optional)
      - name: Port-forward Service
        run: |
          kubectl port-forward svc/helloworld-chart 8080:80 &